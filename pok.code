import "ecc/babyjubjubParams.code" as context
import "ecc/edwardsAdd.code" as add
import "ecc/edwardsNegate.code" as negate
import "ecc/edwardsScalarMult.code" as multiply
import "utils/pack/nonStrictUnpack256.code" as unpack256
import "hashes/sha256/512bitPacked.code" as sha256packed

// this verifies R', producing a snark to be verified inside of a smart contract
// an R' proof consists of (R0, R1, R2, R3, S0, S1, T0, T1,
// d0, d1, d2, d3, u0, v0, w0, u1, v1, w1), with R0 - T1 points, and d0 - w1 scalars.
// scalars in this case just get represented as field elements, which then get broken
// up in 256 'field elements', each holding a bit.
// first msg = R0 - T1 = 8 x 2 babyjubjub field elements
// second msg = d0 - w1 = 10 babyjubjub scalar elements (put into field variables)

// we also have our own context, consisting of y, A0, A1, A2, A3, A4, A5, A6,
// g0, g1, h0, and h1. this is another 12 group elements, so 24 field elements,
// but these are stored in the verification contract, and so should be used here
// without proving anything about them?


// statement = H(y, A0, ..., A6)
// firstmsg = R0, R1, R2, R3, S0, S1, T0, T1
// secondmsg = d0, d1, d2, d3, u0, v0, w0, u1, v1, w1, (a1 - u0), (a2 - u1) 

def main(field statement, field[16] fstmsg, field[12] sndmsg, field[10] context) -> (field):

  field[2] g = [13037949799327265748286426706936349024124924757595405599698606380497400784347, 393589182837104319763301766843923249088483507277002073284380207823253619313]
  field[2] g0 = [10480227264716662452755474067665177302533350463766626583754719465282143096156, 8369223176222797522123539354678750082493875221914526607111902450577289923070]
  field[2] g1 = [11880246950178646564845070742914370409150886704747897303831567178374129810211, 11568178448482280388943253237660832271540088086331062617007232034122551287432]
  field[2] h0 = [3168195724794061035067437460306519652998969886362841281644734115844445886185, 8489771060550565563483479806652696626788502212157814537990951108069267515955]
  field[2] h1 = [12239960479043393909262572194446271981202432681542270714195285876953060316412, 16901143140203092244252603065645010058104514960352419130166756310402509981799]
  field[2] y = [13037949799327265748286426706936349024124924757595405599698606380497400784347, 393589182837104319763301766843923249088483507277002073284380207823253619313]
  field[2] c0 = [10480227264716662452755474067665177302533350463766626583754719465282143096156, 8369223176222797522123539354678750082493875221914526607111902450577289923070]
  field[2] c1 = [20186739532649119107672440354694340114834694434300541858642594310616195997500, 18706765619969440320485561529057484356509252160883907810438485973573770139770]
  field[2] c2 = [4802928698680786556490247734963910564288760952344594036645417731094165113420, 1764710199218406196133033656155601399202708880978486158014954665682961743486]
  field[2] c3 = [10480227264716662452755474067665177302533350463766626583754719465282143096156, 8369223176222797522123539354678750082493875221914526607111902450577289923070]
  field[2] c4 = [8554024773979213790884962376001634019360127252764938440741374853077848272573, 15100040560583980985622143814464925219089768910366533357383171777182778530991]

  field[2] A0 = c0
  field[2] A1 = c1
  field[2] A2 = c2
  field[2] minusc1 = negate(c1, context)
  field[2] c0c2 = add(c0, c2, context)
  field[2] A3 = add(c0c2, minusc1, context)
  field[2] minusc2 = negate(c2, context)
  field[2] c1c4 = add(c1, c4, context)
  field[2] A4 = add(c1c4, minusc2, context)
  field[2] A5 = c3
  field[2] c1c2 = add(c1, minusc2, context)
  field[2] c3c4 = add(c3, c4, context)
  field[2] A6 = add(c1c2, c3c4, context)

  // out should remain 0 -- treat 0 as true
  field out = 0
  // out = out + if statement == sha256packed([c0, c1, c2, c3]) then 0 else 1 fi

  // field[2] prea0 = sha256packed(fstmsg[0..4])
  // field[256] a0 = unpack256(prea0[0])
  // field[2] prea1 = sha256packed(fstmsg[1..5])
  // field[256] a1 = unpack256(prea1[0])
  // field[2] prea2 = sha256packed(fstmsg[2..6])
  // field[256] a2 = unpack256(prea2[0])
  // field[2] prea3 = sha256packed(fstmsg[3..7])
  // field[256] a3 = unpack256(prea3[0])
  // field[2] prea4 = sha256packed(fstmsg[4..8])
  // field[256] a4 = unpack256(prea4[0])
  // field[2] prea5 = sha256packed(fstmsg[5..9])
  // field[256] a5 = unpack256(prea5[0])
  // field[2] prea6 = sha256packed(fstmsg[6..10])
  // field[256] a6 = unpack256(prea6[0])

  field[256] a0 = unpack256(statement)
  field[256] a1 = unpack256(statement)
  field[256] a2 = unpack256(statement)
  field[256] a3 = unpack256(statement)
  field[256] a4 = unpack256(statement)
  field[256] a5 = unpack256(statement)
  field[256] a6 = unpack256(statement)

  field[2] R0 = [fstmsg[0], fstmsg[1]]
  field[2] R1 = [fstmsg[2], fstmsg[3]]
  field[2] R2 = [fstmsg[4], fstmsg[5]]
  field[2] R3 = [fstmsg[6], fstmsg[7]]
  field[2] S0 = [fstmsg[8], fstmsg[9]]
  field[2] S1 = [fstmsg[10], fstmsg[11]]
  field[2] T0 = [fstmsg[12], fstmsg[13]]
  field[2] T1 = [fstmsg[14], fstmsg[15]]

  field[256] d0 = unpack256(sndmsg[0])
  field[256] d1 = unpack256(sndmsg[1])
  field[256] d2 = unpack256(sndmsg[2])
  field[256] d3 = unpack256(sndmsg[3])
  field[256] u0 = unpack256(sndmsg[4])
  field[256] v0 = unpack256(sndmsg[5])
  field[256] w0 = unpack256(sndmsg[6])
  field[256] u1 = unpack256(sndmsg[7])
  field[256] v1 = unpack256(sndmsg[8])
  field[256] w1 = unpack256(sndmsg[9])
  field[256] a1minusu0 = unpack256(sndmsg[10])
  field[256] a2minusu1 = unpack256(sndmsg[11])

  // d0 g0 = R0 + (a0 A0) + (a5 A5)
  field[2] lhs0 = multiply(d0, g0, context)
  field[2] a0a0 = multiply(a0, A0, context)
  field[2] a5a5 = multiply(a5, A5, context)
  field[2] R0a0 = add(R0, a0a0, context)
  field[2] rhs0 = add(R0a0, a5a5, context)

  // (u0 g1) + (v0 h0) = S0 + (a1 A1)
  field[2] u0g1 = multiply(u0, g1, context)
  field[2] v0h0 = multiply(v0, h0, context)
  field[2] lhs1 = add(u0g1, v0h0, context)
  field[2] a1a1 = multiply(a1, A1, context)
  field[2] rhs1 = add(S0, a1a1, context)

  // (w0 h0) = T0 + (a1 - u0) A1
  field[2] lhs2 = multiply(w0, h0, context)
  field[2] aua1 = multiply(a1minusu0, A1, context)
  field[2] rhs2 = add(T0, aua1, context)

  // (u1 g1) + (v1 y) = S1 + (a2 A2)
  field[2] u1g1 = multiply(u1, g1, context)
  field[2] v1y =  multiply(v1, y, context)
  field[2] lhs3 = add(u1g1, v1y, context)
  field[2] a2a2 = multiply(a2, A2, context)
  field[2] rhs3 = add(S1, a2a2, context)

  // w1 y = T1 + (a2 - u1) * A2
  field[2] lhs4 = multiply(w1, y, context)
  field[2] aua2 = multiply(a2minusu1, A2, context)
  field[2] rhs4 = add(T1, aua2, context)

  // d1(g0 - h0 + y) = R1 + (a3 A3)
  field[2] minush0 = negate(h0, context)
  field[2] g0h0 = add(g0, minush0, context)
  field[2] ghy = add(g0h0, y, context)
  field[2] lhs5 = multiply(d1, ghy, context)
  field[2] a3a3 = multiply(a3, A3, context)
  field[2] rhs5 = add(R1, a3a3, context)

  // d2 h1 = R2 + (a4 A4)
  field[2] lhs6 = multiply(d2, h1, context)
  field[2] a4a4 = multiply(a4, A4, context)
  field[2] rhs6 = add(R2, a4a4, context)

  // d3 (g0 + h1) = R3 + (a6 A6)
  field[2] g0h1 = add(g0, h1, context)
  field[2] lhs7 = multiply(d3, g0h1, context)
  field[2] a6a6 = multiply(a6, A6, context)
  field[2] rhs7 = add(R3, a6a6, context)

  out =	out + if lhs0[0] == rhs0[0] then 0 else 1 fi
  out = out + if lhs1[0] == rhs1[0] then 0 else 1 fi
  out = out + if lhs2[0] == rhs2[0] then 0 else 1 fi
  out = out + if lhs3[0] == rhs3[0] then 0 else 1 fi
  out = out + if lhs4[0] == rhs4[0] then 0 else 1 fi
  out = out + if lhs5[0] == rhs5[0] then 0 else 1 fi
  out = out + if lhs6[0] == rhs6[0] then 0 else 1 fi
  out = out + if lhs7[0] == rhs7[0] then 0 else 1 fi
  return 0
