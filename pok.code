import "ecc/babyjubjubParams.code" as context
import "ecc/edwardsAdd.code" as add
import "ecc/edwardsNegate.code" as negate
import "ecc/edwardsScalarMult.code" as multiply
import "utils/pack/nonStrictUnpack256.code" as unpack256
import "hashes/sha256/512bitPacked.code" as sha256packed

// this verifies R', producing a snark to be verified inside of a smart contract
// an R' proof consists of (R0, R1, R2, R3, S0, S1, T0, T1,
// d0, d1, d2, d3, u0, v0, w0, u1, v1, w1), with R0 - T1 points, and d0 - w1 scalars.
// scalars in this case just get represented as field elements, which then get broken
// up in 256 'field elements', each holding a bit.
// first msg = R0 - T1 = 8 x 2 babyjubjub field elements
// second msg = d0 - w1 = 10 babyjubjub scalar elements (put into field variables)

// statement = H(y, A0, ..., A6)
// firstmsg = R0, R1, R2, R3, S0, S1, T0, T1
// secondmsg = d0, d1, d2, d3, u0, v0, w0, u1, v1, w1, (a1 - u0), (a2 - u1)

def main(field statement, field[16] fstmsg, field[12] sndmsg) -> (field):

  context = context()

  field[2] g = [16540640123574156134436876038791482806971768689494387082833631921987005038935, 20819045374670962167435360035096875258406992893633759881276124905556507972311]
  field[2] y = [5344383455487509482509413202726169074778042353757335135839465692887812669040, 9962018893896113447322493865616868460730214294033129642487385396209612409524]
  field[2] g0 = [21446853610366762274543286894939732683088218811601317008306398826691684244055, 15720077763081320174458862132544697942140884593549037349308706414248082286764]
  field[2] g1 = [14804115889914105299992879727408878944323146906721764046801739184664699932537, 8736520759730345205904607968106845959026431466519185874804095033421559598910]
  field[2] h0 = [6207844306906977871550062244950683680232713734067886282979770836147211319599, 2412173664234504570059052359177353889814173561023522365764522281499607585510]
  field[2] h1 = [4298060408984771021878265015016713116239602456288955557576462191365020203907, 15348399832411920420034441404292960285058820860070348139700955821159252639534]

  field[2] c0 = [12444790570887288540054776046775992651312207700225882163307694331386971508869, 2807592455977252456140509523216678097783681468875826714537489882100197772307]
  field[2] c1 = [21212727518216437397033482859209422375242368251940383320073854773290764717987, 19388697299621167374085067408271298622654551179194700637307608298436576759070]
  field[2] c2 = [7083017579818488393337456039625473551548527663093790207947638275790124086402, 518076611043854153070639176198249045805081627046188812311950380525634488250]
  field[2] c3 = [12444790570887288540054776046775992651312207700225882163307694331386971508869, 2807592455977252456140509523216678097783681468875826714537489882100197772307]
  field[2] c4 = [18323503173261911220823481726653285756151639961511693662840761989457406850378, 4392977823335395044788830276054605409180691001966839408387643982494247852519]

  field[2] A0 = c0
  field[2] A1 = c1
  field[2] A2 = c2
  field[2] minusc1 = negate(c1, context)
  field[2] c0c2 = add(c0, c2, context)
  field[2] A3 = add(c0c2, minusc1, context)
  field[2] minusc2 = negate(c2, context)
  field[2] c1c4 = add(c1, c4, context)
  field[2] A4 = add(c1c4, minusc2, context)
  field[2] A5 = c3
  field[2] c1c2 = add(c1, minusc2, context)
  field[2] c3c4 = add(c3, c4, context)
  field[2] A6 = add(c1c2, c3c4, context)

  // out should remain 0 -- treat 0 as true
  field out = 0
  // out = out + if statement == sha256packed([c0, c1, c2, c3]) then 0 else 1 fi

  field[2] prea0 = sha256packed(fstmsg[0..4])
  field[256] a0 = unpack256(prea0[0])
  field[2] prea1 = sha256packed(fstmsg[1..5])
  field[256] a1 = unpack256(prea1[0])
  field[2] prea2 = sha256packed(fstmsg[2..6])
  field[256] a2 = unpack256(prea2[0])
  field[2] prea3 = sha256packed(fstmsg[3..7])
  field[256] a3 = unpack256(prea3[0])
  field[2] prea4 = sha256packed(fstmsg[4..8])
  field[256] a4 = unpack256(prea4[0])
  field[2] prea5 = sha256packed(fstmsg[5..9])
  field[256] a5 = unpack256(prea5[0])
  field[2] prea6 = sha256packed(fstmsg[6..10])
  field[256] a6 = unpack256(prea6[0])

  field[2] R0 = [fstmsg[0], fstmsg[1]]
  field[2] R1 = [fstmsg[2], fstmsg[3]]
  field[2] R2 = [fstmsg[4], fstmsg[5]]
  field[2] R3 = [fstmsg[6], fstmsg[7]]
  field[2] S0 = [fstmsg[8], fstmsg[9]]
  field[2] S1 = [fstmsg[10], fstmsg[11]]
  field[2] T0 = [fstmsg[12], fstmsg[13]]
  field[2] T1 = [fstmsg[14], fstmsg[15]]

  field[256] d0 = unpack256(sndmsg[0])
  field[256] d1 = unpack256(sndmsg[1])
  field[256] d2 = unpack256(sndmsg[2])
  field[256] d3 = unpack256(sndmsg[3])
  field[256] u0 = unpack256(sndmsg[4])
  field[256] v0 = unpack256(sndmsg[5])
  field[256] w0 = unpack256(sndmsg[6])
  field[256] u1 = unpack256(sndmsg[7])
  field[256] v1 = unpack256(sndmsg[8])
  field[256] w1 = unpack256(sndmsg[9])
  field[256] a1minusu0 = unpack256(sndmsg[10])
  field[256] a2minusu1 = unpack256(sndmsg[11])

  // d0 g0 = R0 + (a0 A0) + (a5 A5)
  field[2] lhs0 = multiply(d0, g0, context)
  field[2] a0a0 = multiply(a0, A0, context)
  field[2] a5a5 = multiply(a5, A5, context)
  field[2] R0a0 = add(R0, a0a0, context)
  field[2] rhs0 = add(R0a0, a5a5, context)

  // (u0 g1) + (v0 h0) = S0 + (a1 A1)
  field[2] u0g1 = multiply(u0, g1, context)
  field[2] v0h0 = multiply(v0, h0, context)
  field[2] lhs1 = add(u0g1, v0h0, context)
  field[2] a1a1 = multiply(a1, A1, context)
  field[2] rhs1 = add(S0, a1a1, context)

  // (w0 h0) = T0 + (a1 - u0) A1
  field[2] lhs2 = multiply(w0, h0, context)
  field[2] aua1 = multiply(a1minusu0, A1, context)
  field[2] rhs2 = add(T0, aua1, context)

  // (u1 g1) + (v1 y) = S1 + (a2 A2)
  field[2] u1g1 = multiply(u1, g1, context)
  field[2] v1y =  multiply(v1, y, context)
  field[2] lhs3 = add(u1g1, v1y, context)
  field[2] a2a2 = multiply(a2, A2, context)
  field[2] rhs3 = add(S1, a2a2, context)

  // w1 y = T1 + (a2 - u1) * A2
  field[2] lhs4 = multiply(w1, y, context)
  field[2] aua2 = multiply(a2minusu1, A2, context)
  field[2] rhs4 = add(T1, aua2, context)

  // d1(g0 - h0 + y) = R1 + (a3 A3)
  field[2] minush0 = negate(h0, context)
  field[2] g0h0 = add(g0, minush0, context)
  field[2] ghy = add(g0h0, y, context)
  field[2] lhs5 = multiply(d1, ghy, context)
  field[2] a3a3 = multiply(a3, A3, context)
  field[2] rhs5 = add(R1, a3a3, context)

  // d2 h1 = R2 + (a4 A4)
  field[2] lhs6 = multiply(d2, h1, context)
  field[2] a4a4 = multiply(a4, A4, context)
  field[2] rhs6 = add(R2, a4a4, context)

  // d3 (g0 + h1) = R3 + (a6 A6)
  field[2] g0h1 = add(g0, h1, context)
  field[2] lhs7 = multiply(d3, g0h1, context)
  field[2] a6a6 = multiply(a6, A6, context)
  field[2] rhs7 = add(R3, a6a6, context)

  out =	out + if lhs0[0] == rhs0[0] then 0 else 1 fi
  out = out + if lhs1[0] == rhs1[0] then 0 else 1 fi
  out = out + if lhs2[0] == rhs2[0] then 0 else 1 fi
  out = out + if lhs3[0] == rhs3[0] then 0 else 1 fi
  out = out + if lhs4[0] == rhs4[0] then 0 else 1 fi
  out = out + if lhs5[0] == rhs5[0] then 0 else 1 fi
  out = out + if lhs6[0] == rhs6[0] then 0 else 1 fi
  out = out + if lhs7[0] == rhs7[0] then 0 else 1 fi
  return out 
